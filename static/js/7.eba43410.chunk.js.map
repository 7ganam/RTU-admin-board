{"version":3,"sources":["ui-component/cards/Skeleton/RelayCard.js","ui-component/extended/Avatar.js","ui-component/cards/CardSecondaryAction.js","views/utilities/RelayLightCard.js","views/utilities/ChartCard.js","views/utilities/StationPage.js"],"names":["RelayCard","sx","p","py","alignItems","disableGutters","variant","width","height","primary","secondary","Avatar","color","outline","size","others","theme","useTheme","colorSX","palette","background","paper","bgcolor","outlineSX","border","borderColor","sizeSX","spacing","CardSecondaryAction","title","link","icon","Tooltip","placement","ButtonBase","disableRipple","component","Link","href","target","alt","viewBox","fill","xmlns","clipPath","d","main","id","transform","CardWrapper","styled","MainCard","overflow","position","boxShadow","RelayLightCard","isLoading","RelaysHwState","setCommand","Command","index","content","my","cursor","Box","flexDirection","xs","display","justifyContent","mb","Typography","typography","commonAvatar","largeAvatar","backgroundColor","warning","light","dark","mr","fontSize","Switch","disabled","checked","onChange","newCommand","console","log","md","top","right","CircularProgress","type","options","chart","sparkline","enabled","dataLabels","stroke","curve","tooltip","fixed","x","show","y","marker","localChartData","series","data","ChartCard","data2","unit","ChartData","navType","useSelector","state","customization","orangeDark","useEffect","newSupportChart","colors","ApexCharts","exec","Card","Grid","container","pb","item","grey","length","style","StyledTableCell","TableCell","tableCellClasses","head","common","black","white","body","StyledTableRow","TableRow","action","hover","name","calories","fat","carbs","protein","rows","StationPage","useParams","useState","setRelaysHwState","ReceivedRelayArray","setReceivedRelayArray","ReceivedDataArray","setReceivedDataArray","ReceivedDigitalArray","setReceivedDigitalArray","GraphsData","setGraphsData","brokerRef","useRef","publisherFunction","publishString","join","current","publish","JSON","stringify","mqtt","PublisherTimerRef","stopPublishing","clearInterval","isSendingCommand","oneExists","indexOf","zeroExists","timeInterval","setInterval","command","isEqual","receivedRelayArray","commandArray","i","commandArrayCopy","RelaysHwStateCopy","setIndividualStates","graphsDataCopy","reading","graphArray","shift","push","parseFloat","unsubscribe","subscribe","on","topic","payload","payloadArray","inputString","char","split","removeUnwantedChars","TextDecoder","decode","slice","receivedDigitalArray","receivedDataArray","pt","Divider","gridSpacing","sm","TableContainer","Paper","Table","minWidth","TableHead","align","TableBody","map","row","scope"],"mappings":"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","file":"static/js/7.eba43410.chunk.js","sourcesContent":["// material-ui\nimport { Card, List, ListItem, ListItemAvatar, ListItemText, Skeleton } from '@mui/material';\n\n// ==============================|| SKELETON - TOTAL INCOME DARK/LIGHT CARD ||============================== //\n\nconst RelayCard = () => (\n    <Card sx={{ p: 2 }}>\n        <List sx={{ py: 0 }}>\n            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\n                <ListItemAvatar>\n                    <Skeleton variant=\"rectangular\" width={44} height={44} />\n                </ListItemAvatar>\n                <ListItemText\n                    sx={{ py: 0 }}\n                    primary={<Skeleton variant=\"rectangular\" height={20} />}\n                    secondary={<Skeleton variant=\"text\" />}\n                />\n            </ListItem>\n        </List>\n    </Card>\n);\n\nexport default RelayCard;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport MuiAvatar from '@mui/material/Avatar';\n\n// ==============================|| AVATAR ||============================== //\n\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\n    const theme = useTheme();\n\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\n    const outlineSX = outline && {\n        color: color ? `${color}.main` : `primary.main`,\n        bgcolor: theme.palette.background.paper,\n        border: '2px solid',\n        borderColor: color ? `${color}.main` : `primary.main`\n    };\n    let sizeSX = {};\n    switch (size) {\n        case 'badge':\n            sizeSX = {\n                width: theme.spacing(3.5),\n                height: theme.spacing(3.5)\n            };\n            break;\n        case 'xs':\n            sizeSX = {\n                width: theme.spacing(4.25),\n                height: theme.spacing(4.25)\n            };\n            break;\n        case 'sm':\n            sizeSX = {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            };\n            break;\n        case 'lg':\n            sizeSX = {\n                width: theme.spacing(9),\n                height: theme.spacing(9)\n            };\n            break;\n        case 'xl':\n            sizeSX = {\n                width: theme.spacing(10.25),\n                height: theme.spacing(10.25)\n            };\n            break;\n        case 'md':\n            sizeSX = {\n                width: theme.spacing(7.5),\n                height: theme.spacing(7.5)\n            };\n            break;\n        default:\n            sizeSX = {};\n    }\n\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\n};\n\nAvatar.propTypes = {\n    className: PropTypes.string,\n    color: PropTypes.string,\n    outline: PropTypes.bool,\n    size: PropTypes.string,\n    sx: PropTypes.object\n};\n\nexport default Avatar;\n","import PropTypes from 'prop-types';\nimport { useTheme } from '@mui/material/styles';\nimport { ButtonBase, Link, Tooltip } from '@mui/material';\n\n// project imports\nimport Avatar from '../extended/Avatar';\n\n// ==============================|| CARD SECONDARY ACTION ||============================== //\n\nconst CardSecondaryAction = ({ title, link, icon }) => {\n    const theme = useTheme();\n\n    return (\n        <Tooltip title={title || 'Reference'} placement=\"left\">\n            <ButtonBase disableRipple>\n                {!icon && (\n                    <Avatar component={Link} href={link} target=\"_blank\" alt=\"MUI Logo\" size=\"badge\" color=\"primary\" outline>\n                        <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <g clipPath=\"url(#clip0)\">\n                                <path\n                                    d=\"M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z\"\n                                    fill={theme.palette.primary[800]}\n                                />\n                                <path\n                                    d=\"M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z\"\n                                    fill={theme.palette.primary.main}\n                                />\n                                <path d=\"M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z\" fill={theme.palette.primary[800]} />\n                                <path\n                                    d=\"M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z\"\n                                    fill={theme.palette.primary.main}\n                                />\n                            </g>\n                            <defs>\n                                <clipPath id=\"clip0\">\n                                    <rect width=\"300\" height=\"238.3\" fill=\"white\" transform=\"translate(100 131)\" />\n                                </clipPath>\n                            </defs>\n                        </svg>\n                    </Avatar>\n                )}\n                {icon && (\n                    <Avatar component={Link} href={link} target=\"_blank\" size=\"badge\" color=\"primary\" outline>\n                        {icon}\n                    </Avatar>\n                )}\n            </ButtonBase>\n        </Tooltip>\n    );\n};\n\nCardSecondaryAction.propTypes = {\n    icon: PropTypes.node,\n    link: PropTypes.string,\n    title: PropTypes.string\n};\n\nexport default CardSecondaryAction;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Avatar, Box, Typography } from '@mui/material';\nimport Switch from '@mui/material/Switch';\nimport CircularProgress from '@mui/material/CircularProgress';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport RelayCard from 'ui-component/cards/Skeleton/RelayCard';\n\n// assets\nimport ControlCameraIcon from '@mui/icons-material/ControlCamera';\n// styles\n// eslint-disable-next-line no-unused-vars\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    overflow: 'hidden',\n    position: 'relative',\n    '&:hover': {\n        boxShadow: 4\n    }\n}));\n\n// ==============================|| DASHBOARD - TOTAL INCOME LIGHT CARD ||============================== //\n\n// eslint-disable-next-line react/prop-types\nconst RelayLightCard = ({ isLoading, RelaysHwState, setCommand, Command, index }) => {\n    const theme = useTheme();\n    const handleChange = () => {\n        const newCommand = [...Command];\n        console.log('newCommand', newCommand);\n        newCommand[index] = RelaysHwState[index] === '1' ? '0' : '1';\n        console.log('newCommand', newCommand);\n        setCommand(newCommand);\n    };\n    return (\n        <>\n            {isLoading ? (\n                <RelayCard />\n            ) : (\n                <CardWrapper\n                    border={false}\n                    content={false}\n                    sx={{\n                        boxShadow: 3,\n                        my: 1,\n                        '&:hover': {\n                            boxShadow: 4,\n                            cursor: 'pointer'\n                        }\n                    }}\n                >\n                    <Box sx={{ p: 2, position: 'relative' }}>\n                        <Box\n                            sx={{\n                                flexDirection: { xs: 'column' },\n\n                                display: 'flex'\n                            }}\n                            spacing={2}\n                        >\n                            <Box sx={{ display: 'flex', justifyContent: 'start', alignItems: 'center', mb: 1 }}>\n                                <Typography variant=\"h5\">Relay 1</Typography>\n                            </Box>\n                            <Box sx={{ display: 'flex' }}>\n                                <Box>\n                                    <Avatar\n                                        variant=\"rounded\"\n                                        sx={{\n                                            ...theme.typography.commonAvatar,\n                                            ...theme.typography.largeAvatar,\n                                            backgroundColor: theme.palette.warning.light,\n                                            color: theme.palette.warning.dark,\n                                            mr: 2\n                                        }}\n                                    >\n                                        <ControlCameraIcon fontSize=\"inherit\" />\n                                    </Avatar>\n                                </Box>\n                                <Box>\n                                    {RelaysHwState[index] === '1' || RelaysHwState[index] === '0' ? (\n                                        <Switch\n                                            disabled={Command[index] === '1' || Command[index] === '0'}\n                                            checked={RelaysHwState[index] === '1'}\n                                            onChange={handleChange}\n                                        />\n                                    ) : (\n                                        <div>X</div>\n                                    )}\n                                </Box>\n                            </Box>\n                        </Box>\n                        <Box\n                            xs={12}\n                            md={3}\n                            sx={{\n                                width: '10px',\n                                position: 'absolute',\n                                top: '15px',\n                                right: '25px'\n                            }}\n                        >\n                            {(Command[index] === '1' || Command[index] === '0') && <CircularProgress color=\"secondary\" size=\"20px\" />}\n                        </Box>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    );\n};\n\nRelayLightCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default RelayLightCard;\n","import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, Grid, Typography } from '@mui/material';\n\n// third-party\nimport ApexCharts from 'apexcharts';\nimport Chart from 'react-apexcharts';\n\n// ===========================|| DASHBOARD DEFAULT - BAJAJ AREA CHART CARD ||=========================== //\n\n// eslint-disable-next-line react/prop-types\n\nconst type = 'area';\nconst height = 95;\nconst options = {\n    chart: {\n        id: 'support-chart',\n        sparkline: {\n            enabled: true\n        }\n    },\n    dataLabels: {\n        enabled: false\n    },\n    stroke: {\n        curve: 'smooth',\n        width: 1\n    },\n    tooltip: {\n        fixed: {\n            enabled: false\n        },\n        x: {\n            show: false\n        },\n        y: {\n            title: 'Ticket '\n        },\n        marker: {\n            show: false\n        }\n    }\n};\nconst localChartData = {\n    type,\n    height,\n    options,\n    series: [\n        {\n            data: [10, 0, 0, 10, 0, 0, 0]\n        }\n    ]\n};\nconst ChartCard = ({ data2, title, unit }) => {\n    // eslint-disable-next-line react/prop-types\n    const ChartData = localChartData;\n    const data = data2;\n\n    const theme = useTheme();\n    const customization = useSelector((state) => state.customization);\n    const { navType } = customization;\n\n    const orangeDark = theme.palette.secondary[800];\n\n    useEffect(() => {\n        const newSupportChart = {\n            // eslint-disable-next-line react/prop-types\n            ...ChartData.options,\n            colors: [orangeDark],\n            tooltip: {\n                theme: 'light'\n            }\n        };\n        ApexCharts.exec(`support-chart`, 'updateOptions', newSupportChart);\n    }, [navType, orangeDark, ChartData]);\n\n    return (\n        <Card sx={{ bgcolor: 'secondary.light' }}>\n            <Grid container sx={{ p: 2, pb: 0, color: '#fff' }}>\n                <Grid item xs={12}>\n                    <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                        <Grid item>\n                            <Typography variant=\"subtitle1\" sx={{ color: theme.palette.secondary.dark }}>\n                                {title ?? '---'}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Typography variant=\"h4\" sx={{ color: theme.palette.grey[800] }}>\n                                {`${data[data.length - 1]}${unit}` ?? `--${unit}`}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" sx={{ color: theme.palette.grey[800] }} />\n                </Grid>\n            </Grid>\n            <div style={{ height: '100px' }}>\n                {ChartData && (\n                    <Chart\n                        type={type}\n                        height={100}\n                        options={options}\n                        series={[\n                            {\n                                data: data2\n                            }\n                        ]}\n                    />\n                )}{' '}\n            </div>\n        </Card>\n    );\n};\n\nexport default ChartCard;\n","/* eslint-disable no-plusplus */\nimport { Card, Grid } from '@mui/material';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { gridSpacing } from 'store/constant';\nimport RelayLightCard from './RelayLightCard';\n\n// assets\nimport LinkIcon from '@mui/icons-material/Link';\nimport ChartCard from './ChartCard';\nimport Divider from '@mui/material/Divider';\nimport { useParams } from 'react-router-dom';\nimport { useState, useRef, useEffect } from 'react';\nimport * as mqtt from 'mqtt'; // import everything inside the mqtt module and give it the namespace \"mqtt\"\n\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n// =============================|| TABLER ICONS ||============================= //\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14\n    }\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0\n    }\n}));\n\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [createData('station1', 'loading...', 'loading...', 'loading...', 'loading...')];\n\nconst StationPage = () => {\n    const { id } = useParams();\n    const [RelaysHwState, setRelaysHwState] = useState(['-', '-', '-', '-', '-', '-']);\n    const [Command, setCommand] = useState(['-', '-', '-', '-', '-', '-']);\n    const [ReceivedRelayArray, setReceivedRelayArray] = useState([]);\n    const [ReceivedDataArray, setReceivedDataArray] = useState([]);\n    const [ReceivedDigitalArray, setReceivedDigitalArray] = useState(['loading...', 'loading...', 'loading...', 'loading...']);\n    const [GraphsData, setGraphsData] = useState([\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0]\n    ]);\n\n    // connect to broker\n    const brokerRef = useRef();\n    useEffect(() => {\n        brokerRef.current = mqtt.connect('ws://ec2-52-28-144-120.eu-central-1.compute.amazonaws.com:8000', {\n            // open connection with your broker in AWS via websocket\n            // username: 'ganam', //authenticate your broker with username and password\n            // password: '123123',\n        });\n\n        return () => {};\n    }, []);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    function publisherFunction() {\n        let publishString = Command.join(',');\n        publishString += ',';\n        console.log('pulished value', publishString);\n        brokerRef.current.publish(\n            `station${id}/command`,\n            JSON.stringify(publishString) // convert number to string\n        );\n    }\n\n    const PublisherTimerRef = useRef(null);\n    const startPublishing = (timeInterval) => {\n        PublisherTimerRef.current = setInterval(publisherFunction, timeInterval, 100, 200);\n    };\n    const stopPublishing = () => {\n        clearInterval(PublisherTimerRef.current);\n    };\n\n    const isSendingCommand = () => {\n        const oneExists = Command.indexOf('1') !== -1;\n        const zeroExists = Command.indexOf('0') !== -1;\n        return oneExists || zeroExists;\n    };\n\n    useEffect(() => {\n        if (isSendingCommand()) {\n            stopPublishing();\n            startPublishing(3000);\n        }\n        return () => {\n            stopPublishing();\n        };\n    }, [Command]);\n\n    const removeUnwantedChars = (inputString) => {\n        const forbiddenChars = ['\"'];\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const char of forbiddenChars) {\n            inputString = inputString.split(char).join('');\n        }\n        return inputString;\n    };\n\n    const isEqual = (ReceivedRelayArray, command) => {\n        for (let index = 0; index < ReceivedRelayArray.length; index++) {\n            if (command[index] === '1' || command[index] === '0') {\n                if (command[index] !== ReceivedRelayArray[index]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n\n    const setIndividualStates = (receivedRelayArray, commandArray) => {\n        for (let i = 0; i < receivedRelayArray.length; i++) {\n            if ((commandArray[i] === '1' || commandArray[i] === '0') && commandArray[i] === receivedRelayArray[i]) {\n                const commandArrayCopy = [...commandArray];\n                commandArrayCopy[i] = '-';\n                setCommand(commandArrayCopy); // reset the command\n                const RelaysHwStateCopy = [...RelaysHwState];\n                RelaysHwStateCopy[i] = receivedRelayArray[i];\n                setRelaysHwState(RelaysHwStateCopy); // set the single relay state to the received the data\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (isSendingCommand()) {\n            if (isEqual(ReceivedRelayArray, Command)) {\n                // if received hardware state is the same as the command being send .. reset the command and change the in app hardware states\n                setCommand(['-', '-', '-', '-', '-', '-']);\n                stopPublishing();\n                setRelaysHwState(ReceivedRelayArray);\n            } else {\n                // to make for the case if another client set a state while this client is setting.\n                setIndividualStates(ReceivedRelayArray, Command);\n            }\n        } else {\n            setRelaysHwState(ReceivedRelayArray);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ReceivedRelayArray]);\n\n    useEffect(() => {\n        // console.log('ReceivedDataArray', ReceivedDataArray);\n        const graphsDataCopy = [...GraphsData];\n        for (let index = 0; index < ReceivedDataArray.length; index++) {\n            const reading = ReceivedDataArray[index];\n            // console.log('reading', reading);\n            const graphArray = [...GraphsData[index]];\n            graphArray.shift();\n            graphArray.push(parseFloat(reading));\n            graphsDataCopy[index] = graphArray;\n        }\n        setGraphsData(graphsDataCopy);\n    }, [ReceivedDataArray]);\n\n    // Subscribe to all topics and define the call back functions\n    useEffect(() => {\n        // subscribe to hardware state\n        brokerRef.current.unsubscribe(`station${id}/hwState`);\n        brokerRef.current.subscribe(`station${id}/hwState`);\n        // define the call back function\n        brokerRef.current.on('message', (topic, payload) => {\n            const payloadString = new TextDecoder().decode(payload);\n            const cleanPayloadString = removeUnwantedChars(payloadString);\n            const payloadArray = cleanPayloadString.split(',');\n            console.log('payloadArray', payloadArray);\n            // get relays values\n            const receivedRelayArray = payloadArray.slice(8, 14);\n            setReceivedRelayArray(receivedRelayArray);\n\n            const receivedDigitalArray = payloadArray.slice(14, 18);\n            setReceivedDigitalArray(receivedDigitalArray);\n\n            const receivedDataArray = payloadArray.slice(0, 8);\n\n            setReceivedDataArray(receivedDataArray);\n        });\n        return () => {};\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <MainCard\n            title={`Station ${id}`}\n            secondary={<SecondaryAction icon={<LinkIcon fontSize=\"small\" />} link=\"https://tablericons.com/\" />}\n        >\n            <Card sx={{ overflow: 'hidden' }}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"V1\" unit=\"V\" data2={GraphsData[0]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"V2\" unit=\"V\" data2={GraphsData[1]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"V3\" unit=\"V\" data2={GraphsData[2]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"F\" unit=\"Hz\" data2={GraphsData[3]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"I1\" unit=\"A\" data2={GraphsData[4]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"I2\" unit=\"A\" data2={GraphsData[5]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"I3\" unit=\"A\" data2={GraphsData[6]} />\n                    </Grid>\n                    <Grid item xs={12} md={4} sx={{ pt: '16px !important' }}>\n                        <ChartCard title=\"AP\" unit=\"VA\" data2={GraphsData[7]} />\n                    </Grid>\n                </Grid>\n\n                <Divider sx={{ my: 3 }} />\n\n                <Grid item xs={12}>\n                    <Grid container spacing={gridSpacing} p={1}>\n                        <Grid item sm={6} xs={12} md={3}>\n                            <RelayLightCard\n                                isLoading={RelaysHwState[0] !== '1' && RelaysHwState[0] !== '0'}\n                                RelaysHwState={RelaysHwState}\n                                setCommand={setCommand}\n                                Command={Command}\n                                index={0}\n                            />\n                        </Grid>\n                        <Grid item sm={6} xs={12} md={3}>\n                            <RelayLightCard\n                                isLoading={RelaysHwState[0] !== '1' && RelaysHwState[0] !== '0'}\n                                RelaysHwState={RelaysHwState}\n                                setCommand={setCommand}\n                                Command={Command}\n                                index={1}\n                            />\n                        </Grid>{' '}\n                        <Grid item sm={6} xs={12} md={3}>\n                            <RelayLightCard\n                                isLoading={RelaysHwState[0] !== '1' && RelaysHwState[0] !== '0'}\n                                RelaysHwState={RelaysHwState}\n                                setCommand={setCommand}\n                                Command={Command}\n                                index={2}\n                            />\n                        </Grid>\n                        <Grid item sm={6} xs={12} md={3}>\n                            <RelayLightCard\n                                isLoading={RelaysHwState[0] !== '1' && RelaysHwState[0] !== '0'}\n                                RelaysHwState={RelaysHwState}\n                                setCommand={setCommand}\n                                Command={Command}\n                                index={3}\n                            />\n                        </Grid>\n                        <Grid item sm={6} xs={12} md={3}>\n                            <RelayLightCard\n                                isLoading={RelaysHwState[0] !== '1' && RelaysHwState[0] !== '0'}\n                                RelaysHwState={RelaysHwState}\n                                setCommand={setCommand}\n                                Command={Command}\n                                index={4}\n                            />\n                        </Grid>{' '}\n                        <Grid item sm={6} xs={12} md={3}>\n                            <RelayLightCard\n                                isLoading={RelaysHwState[0] !== '1' && RelaysHwState[0] !== '0'}\n                                RelaysHwState={RelaysHwState}\n                                setCommand={setCommand}\n                                Command={Command}\n                                index={5}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n\n                <Divider sx={{ my: 3 }} />\n\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell>Digital Values</StyledTableCell>\n                                <StyledTableCell align=\"right\">Value1</StyledTableCell>\n                                <StyledTableCell align=\"right\">Value2</StyledTableCell>\n                                <StyledTableCell align=\"right\">Value3</StyledTableCell>\n                                <StyledTableCell align=\"right\">Value4</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row) => (\n                                <StyledTableRow key={row.name}>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        {row.name}\n                                    </StyledTableCell>\n                                    <StyledTableCell align=\"right\">{ReceivedDigitalArray[0]}</StyledTableCell>\n                                    <StyledTableCell align=\"right\">{ReceivedDigitalArray[1]}</StyledTableCell>\n                                    <StyledTableCell align=\"right\">{ReceivedDigitalArray[2]}</StyledTableCell>\n                                    <StyledTableCell align=\"right\">{ReceivedDigitalArray[3]}</StyledTableCell>\n                                </StyledTableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Card>\n        </MainCard>\n    );\n};\n\nexport default StationPage;\n"],"sourceRoot":""}